{
    "project": {},
    "files": {
        "lib/dialects/abstract/query.js": {
            "name": "lib/dialects/abstract/query.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/dao-factory.js": {
            "name": "lib/dao-factory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/sequelize.js": {
            "name": "lib/sequelize.js",
            "modules": {},
            "classes": {
                "Sequelize": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {
                "sequelize": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "sequelize": {
            "name": "sequelize",
            "submodules": {},
            "classes": {
                "Sequelize": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/sequelize.js",
            "line": 12,
            "description": "The entry point."
        }
    },
    "classes": {
        "Sequelize": {
            "name": "Sequelize",
            "shortname": "Sequelize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sequelize",
            "file": "lib/sequelize.js",
            "line": 12,
            "description": "Main class of the project.",
            "params": [
                {
                    "name": "database",
                    "description": "The name of the database.",
                    "type": "String"
                },
                {
                    "name": "username",
                    "description": "The username which is used to authenticate against the database.",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The password which is used to authenticate against the database.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "An object with options.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n    // without password and options\n    var sequelize = new Sequelize('database', 'username')\n\n    // without options\n    var sequelize = new Sequelize('database', 'username', 'password')\n\n    // without password / with blank password\n    var sequelize = new Sequelize('database', 'username', null, {})\n\n    // with password and options\n    var sequelize = new Sequelize('my_database', 'john', 'doe', {})"
            ],
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 7,
            "description": "Inherit from CustomEventEmitter",
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 12,
            "description": "Execute the passed sql query.\n\nExamples:\n\n    query.run('SELECT 1')",
            "params": [
                {
                    "name": "sql",
                    "description": "- The SQL query which should be executed.",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 26,
            "description": "Check the logging option of the instance and print deprecation warnings.",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 43,
            "description": "High level function that handles the results of a query execution.\n\n\nExample:\n query.formatResults([\n   {\n     id: 1,              // this is from the main table\n     attr2: 'snafu',     // this is from the main table\n     Tasks.id: 1,        // this is from the associated table\n     Tasks.title: 'task' // this is from the associated table\n   }\n ])",
            "params": [
                {
                    "name": "data",
                    "description": "- The result of the query execution.",
                    "type": "Array"
                }
            ],
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 79,
            "description": "Shortcut methods (success, ok) for listening for success events.\n\nParams:\n  - fct: A function that gets executed once the *success* event was triggered.\n\nResult:\n  The function returns the instance of the query.",
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 95,
            "description": "Shortcut methods (failure, fail, error) for listening for error events.\n\nParams:\n  - fct: A function that gets executed once the *error* event was triggered.\n\nResult:\n  The function returns the instance of the query.",
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 112,
            "description": "This function is a wrapper for private methods.",
            "params": [
                {
                    "name": "fctName",
                    "description": "The name of the private method.",
                    "type": "String"
                }
            ],
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 123,
            "description": "Get the attributes of an insert query, which contains the just inserted id.",
            "return": {
                "description": "The field name.",
                "type": "String"
            },
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 136,
            "description": "Iterate over all known tables and search their names inside the sql query.\nThis method will also check association aliases ('as' option).",
            "params": [
                {
                    "name": "attribute",
                    "description": "An attribute of a SQL query. (?)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The found tableName / alias.",
                "type": "String"
            },
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 318,
            "description": "The function takes the result of the query execution and groups\nthe associated data by the callee.\n\nExample:\n  groupDataByCalleeFactory([\n    {\n      callee: { some: 'data', id: 1 },\n      association: { foo: 'bar', id: 1 }\n    }, {\n      callee: { some: 'data', id: 1 },\n      association: { foo: 'bar', id: 2 }\n    }, {\n      callee: { some: 'data', id: 1 },\n      association: { foo: 'bar', id: 3 }\n    }\n  ])\n\nResult:\n  Something like this:\n\n  [\n    {\n      callee:  { some: 'data', id: 1 },\n      association: [\n        { foo: 'bar', id: 1 },\n        { foo: 'bar', id: 2 },\n        { foo: 'bar', id: 3 }\n      ]\n    }\n  ]",
            "class": "Sequelize"
        },
        {
            "file": "lib/dialects/abstract/query.js",
            "line": 378,
            "description": "This function will prepare the result of select queries with joins.",
            "params": [
                {
                    "name": "data",
                    "description": "This array contains objects.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The array will have the needed format for groupDataByCalleeFactory.",
                "type": "Array"
            },
            "class": "Sequelize"
        },
        {
            "file": "lib/dao-factory.js",
            "line": 178,
            "description": "Search for an instance.",
            "params": [
                {
                    "name": "options",
                    "description": "Options to describe the scope of the search.",
                    "type": "Object"
                },
                {
                    "name": "include",
                    "description": "A list of associations which shall get eagerly loaded. Supported is either { include: [ DaoFactory1, DaoFactory2, ...] } or { include: [ { daoFactory: DaoFactory1, as: 'Alias' } ] }.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise which fires `success`, `error`, `complete` and `sql`.",
                "type": "Object"
            },
            "class": "Sequelize"
        },
        {
            "file": "lib/sequelize.js",
            "line": 80,
            "description": "Reference to Utils",
            "class": "Sequelize"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: api",
            "line": " lib/dialects/abstract/query.js:12"
        },
        {
            "message": "Missing item type\nInherit from CustomEventEmitter",
            "line": " lib/dialects/abstract/query.js:7"
        },
        {
            "message": "Missing item type\nExecute the passed sql query.\n\nExamples:\n\n    query.run('SELECT 1')",
            "line": " lib/dialects/abstract/query.js:12"
        },
        {
            "message": "Missing item type\nCheck the logging option of the instance and print deprecation warnings.",
            "line": " lib/dialects/abstract/query.js:26"
        },
        {
            "message": "Missing item type\nHigh level function that handles the results of a query execution.\n\n\nExample:\n query.formatResults([\n   {\n     id: 1,              // this is from the main table\n     attr2: 'snafu',     // this is from the main table\n     Tasks.id: 1,        // this is from the associated table\n     Tasks.title: 'task' // this is from the associated table\n   }\n ])",
            "line": " lib/dialects/abstract/query.js:43"
        },
        {
            "message": "Missing item type\nShortcut methods (success, ok) for listening for success events.\n\nParams:\n  - fct: A function that gets executed once the *success* event was triggered.\n\nResult:\n  The function returns the instance of the query.",
            "line": " lib/dialects/abstract/query.js:79"
        },
        {
            "message": "Missing item type\nShortcut methods (failure, fail, error) for listening for error events.\n\nParams:\n  - fct: A function that gets executed once the *error* event was triggered.\n\nResult:\n  The function returns the instance of the query.",
            "line": " lib/dialects/abstract/query.js:95"
        },
        {
            "message": "Missing item type\nThis function is a wrapper for private methods.",
            "line": " lib/dialects/abstract/query.js:112"
        },
        {
            "message": "Missing item type\nGet the attributes of an insert query, which contains the just inserted id.",
            "line": " lib/dialects/abstract/query.js:123"
        },
        {
            "message": "Missing item type\nIterate over all known tables and search their names inside the sql query.\nThis method will also check association aliases ('as' option).",
            "line": " lib/dialects/abstract/query.js:136"
        },
        {
            "message": "Missing item type\nThe function takes the result of the query execution and groups\nthe associated data by the callee.\n\nExample:\n  groupDataByCalleeFactory([\n    {\n      callee: { some: 'data', id: 1 },\n      association: { foo: 'bar', id: 1 }\n    }, {\n      callee: { some: 'data', id: 1 },\n      association: { foo: 'bar', id: 2 }\n    }, {\n      callee: { some: 'data', id: 1 },\n      association: { foo: 'bar', id: 3 }\n    }\n  ])\n\nResult:\n  Something like this:\n\n  [\n    {\n      callee:  { some: 'data', id: 1 },\n      association: [\n        { foo: 'bar', id: 1 },\n        { foo: 'bar', id: 2 },\n        { foo: 'bar', id: 3 }\n      ]\n    }\n  ]",
            "line": " lib/dialects/abstract/query.js:318"
        },
        {
            "message": "Missing item type\nThis function will prepare the result of select queries with joins.",
            "line": " lib/dialects/abstract/query.js:378"
        },
        {
            "message": "Missing item type\nSearch for an instance.",
            "line": " lib/dao-factory.js:178"
        },
        {
            "message": "Missing item type\nReference to Utils",
            "line": " lib/sequelize.js:80"
        }
    ]
}